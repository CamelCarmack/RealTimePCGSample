#include "/Engine/Public/Platform.ush"
#define EMPTY_FLAG 65535
Texture2D<float> InputSeed;
Texture2D<uint2> InputStepRT;
RWTexture2D<uint2> OutputStepRT;
RWTexture2D<float> OutputSDF;
uint4 SimulateRect;
uint Inverse;
uint Step;
uint SubstractSeedRadius;
float LengthScale;

uint2 GetTexID(uint2 id)
{
    return SimulateRect.xy + id;
}

[numthreads(THREADGROUPSIZE_X, THREADGROUPSIZE_Y, THREADGROUPSIZE_Z)]
void InitStepMain(uint3 id : SV_DispatchThreadID)
{
    uint2 TexID = GetTexID(id.xy);
    float inputTexture = InputSeed[TexID];
    float determin = inputTexture;
    if (Inverse==0)
        OutputStepRT[TexID] = determin >= 0.5f ? TexID : uint2(EMPTY_FLAG, EMPTY_FLAG);
    else
        OutputStepRT[TexID] = determin <= 0.5f ? TexID : uint2(EMPTY_FLAG, EMPTY_FLAG);
}
float JFADist(uint2 curID, uint2 seedID)
{
    uint2 TexSize;
    InputSeed.GetDimensions(TexSize.x, TexSize.y);
    float result = length((float2(curID) - seedID) / TexSize) * LengthScale;
    if (SubstractSeedRadius!=0)
        result -= InputSeed[seedID];
    return result;
}
uint2 JFAStep(uint2 inputTex, uint2 idxy)
{
    uint2 outputTex = inputTex;
    uint2 TexSize;
    InputStepRT.GetDimensions(TexSize.x, TexSize.y);
	//cull inside
    if (inputTex.x != idxy.x || inputTex.y != idxy.y)
    {
        uint2 nearestID = inputTex;
        float minDistance = 1e16;
        if (nearestID.x != EMPTY_FLAG)
        {
            minDistance = JFADist(idxy, nearestID);
        }

        for (int dx = -1; dx <= 1; dx++)
            for (int dy = -1; dy <= 1; dy++)
            {
                if(dx==0&&dy==0)
                    continue;
                int2 sampleID = int2(dx,dy) * Step+idxy;                
                sampleID = clamp(sampleID, SimulateRect.xy, SimulateRect.zw);
                uint2 newID = InputStepRT[sampleID];
			    //if had min distance in previous flooding
                if (newID.x != EMPTY_FLAG)
                {
                    float tempDistance = JFADist(idxy, newID);
                    if (tempDistance < minDistance)
                    {
                        minDistance = tempDistance;
                        nearestID = newID;
                        outputTex = nearestID;

                    }
                }
            }
    }
    return outputTex;
}

[numthreads(THREADGROUPSIZE_X, THREADGROUPSIZE_Y, THREADGROUPSIZE_Z)]
void JFAMain(uint3 id : SV_DispatchThreadID)
{
    uint2 TexID = GetTexID(id.xy);
    uint2 inputTexture = InputStepRT[TexID];
    OutputStepRT[TexID.xy] = JFAStep(inputTexture, TexID);
    
}

[numthreads(THREADGROUPSIZE_X, THREADGROUPSIZE_Y, THREADGROUPSIZE_Z)]
void SDFOutputMain(uint3 id : SV_DispatchThreadID)
{
    uint2 TexID = GetTexID(id.xy);
    OutputSDF[TexID] = min(JFADist(TexID, InputStepRT[TexID]), OutputSDF[TexID])/*/1000*/;
    
}
